<?php
namespace Simpl\Checkout\Api\V3\Controllers;

include_once SIMPL_ABSPATH . '/includes/services/cart.php';
include_once SIMPL_ABSPATH . '/includes/lib/web/controller.php';
include_once SIMPL_ABSPATH . '/includes/lib/web/response.php';
include_once SIMPL_ABSPATH . '/includes/lib/web/request.php';
include_once SIMPL_ABSPATH . '/includes/lib/web/error.php';
include_once SIMPL_ABSPATH . '/includes/lib/web/api_version.php';

use Simpl\Checkout\Services;
use Simpl\Checkout\Lib\Web\Controller;
use Simpl\Checkout\Lib\Web\Response;
use Simpl\Checkout\Lib\Web\Request;
use Simpl\Checkout\Lib\Web\V3_API;
use Simpl\Checkout\Lib\Web;

class CreateCartController implements Controller {
  private $service;
  
  public function __construct() {
    $this->service = new Services\CartService();
  }

  public function handle(Request $req): Response {
    // clear all the existing notices so that we can track if any of the notices
    // generated by our below add_to_cart handle
    wc_clear_notices();

    // handle only if this is an add_to_cart action
    if (isset($req->params()['add-to-cart'])) {
      // in case of simpl checkout if this call happens from PDP then flush
      // the existing cart since there could be stale products in the cart
      WC()->cart->empty_cart();
      \WC_Form_Handler::add_to_cart_action();
    }

    // check of error if any in add_to_cart_action
    $err = wc_get_notices('error');
    if (isset($err) && count($err) > 0) {
      $err_messages = array();
      foreach ($err as $err_message) {
        array_push($err_messages, strip_tags($err_message[
          'notice']));
      }

      return Response::err(SIMPL_HTTP_ERROR_CART_CREATE, $err_messages, Web\STATUS_BAD_REQUEST, V3_API);
    }

    try {
      $resp = $this->service->create(
        $req->unique_id(),
        WC()->cart,
        $req->param('merchant_additional_details'),
        $req->client_information()
      );

      return Response::success($resp, V3_API);
    } catch (\Exception $e) {
      return Response::err_internal_server($e->getMessage(), V3_API);
    }
  }
}